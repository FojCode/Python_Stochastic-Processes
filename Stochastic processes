# Monte Carlo simulation - box Muller formulae 
import numpy as np

def box_muller(u1, u2):
  """
  This function generates two independent standard normal variables using the Box-Muller transform.

  Args:
      u1: A random number uniformly distributed between 0 and 1.
      u2: Another random number uniformly distributed between 0 and 1 (independent of u1).

  Returns:
      A tuple containing two independent standard normal variables (z1, z2).
  """
  z1 = np.sqrt(-2 * np.log(u1)) * np.cos(2 * np.pi * u2)
  z2 = np.sqrt(-2 * np.log(u1)) * np.sin(2 * np.pi * u2)
  return z1, z2



# monte Carlo simulation - polar method
import numpy as np

def polar_method(n_samples, a, b):
  """
  This function generates random samples within a rectangle using the polar method.

  Args:
      n_samples: The number of samples to generate.
      a: The lower bound of the rectangle (x-axis).
      b: The upper bound of the rectangle (x-axis).

  Returns:
      A tuple containing two numpy arrays:
          - x: The generated x-coordinates within the rectangle.
          - y: The generated y-coordinates within the rectangle (uniformly distributed).
  """
  # Generate uniform random variables
  u1 = np.random.rand(n_samples)
  u2 = np.random.rand(n_samples)
